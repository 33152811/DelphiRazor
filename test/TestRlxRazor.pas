unit TestRlxRazor;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, DB, Generics.Collections, CopyPrsr, Classes, Contnrs, SysUtils, HTTPProd,
  RlxRazor, HTTPApp;

type
  // Test methods for class TRlxRazorEngine

  TestTRlxRazorEngine = class(TTestCase)
  strict private
    FRlxRazorEngine: TRlxRazorEngine;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestGetTemplatesFolder;
    procedure TestGetOtherValue;
    procedure TestGetLang;
    procedure TestGetScaffolding;
    procedure TestAddWarning;
    procedure TestProcessRequest;
    procedure TestGetLangFormats;
  end;
  // Test methods for class TRlxRazorProcessor

  TestTRlxRazorProcessor = class(TTestCase)
  strict private
    FRlxRazorProcessor: TRlxRazorProcessor;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestDoBlock;
    procedure TestDoubleAt;
  end;

implementation

procedure TestTRlxRazorEngine.SetUp;
begin
  FRlxRazorEngine := TRlxRazorEngine.Create (nil);
end;

procedure TestTRlxRazorEngine.TearDown;
begin
  FRlxRazorEngine.Free;
  FRlxRazorEngine := nil;
end;

procedure TestTRlxRazorEngine.TestGetTemplatesFolder;
var
  ReturnValue: string;
begin
  // ReturnValue := FRlxRazorEngine.GetTemplatesFolder;
  // TODO: Validate method results
end;

procedure TestTRlxRazorEngine.TestGetOtherValue;
var
  ReturnValue: string;
  FieldName: string;
  ObjectName: string;
begin
  // TODO: Setup method call parameters
  // ReturnValue := FRlxRazorEngine.GetOtherValue(ObjectName, FieldName);
  // TODO: Validate method results
end;

procedure TestTRlxRazorEngine.TestGetLang;
var
  ReturnValue: string;
  FieldName: string;
begin
  // TODO: Setup method call parameters
  // ReturnValue := FRlxRazorEngine.GetLang(FieldName);
  // TODO: Validate method results
end;

procedure TestTRlxRazorEngine.TestGetScaffolding;
var
  ReturnValue: string;
  strDottedClass: string;
begin
  // TODO: Setup method call parameters
  // ReturnValue := FRlxRazorEngine.GetScaffolding(strDottedClass);
  // TODO: Validate method results
end;

procedure TestTRlxRazorEngine.TestAddWarning;
var
  strWarning: string;
begin
  // TODO: Setup method call parameters
  FRlxRazorEngine.AddWarning(strWarning);
  // TODO: Validate method results
end;

procedure TestTRlxRazorEngine.TestProcessRequest;
var
  ReturnValue: string;
  userRoles: string;
  inFolder: string;
  LanguageID: Integer;
  LoggedUser: Boolean;
  Found: Boolean;
  Request: TWebRequest;
begin
  // TODO: Setup method call parameters
  //ReturnValue := FRlxRazorEngine.ProcessRequest(Request, Found, LoggedUser, LanguageID,
  //    inFolder, userRoles);
  // TODO: Validate method results
end;

procedure TestTRlxRazorEngine.TestGetLangFormats;
var
  ReturnValue: TFormatSettings;
  language_id: Integer;
begin
  // TODO: Setup method call parameters
  // ReturnValue := FRlxRazorEngine.GetLangFormats(language_id);
  // TODO: Validate method results
end;

procedure TestTRlxRazorProcessor.SetUp;
begin
  FRlxRazorProcessor := TRlxRazorProcessor.Create (nil);
end;

procedure TestTRlxRazorProcessor.TearDown;
begin
  FRlxRazorProcessor.Free;
  FRlxRazorProcessor := nil;
end;


procedure TestTRlxRazorProcessor.TestDoBlock;
var
  ReturnValue: string;
  strBlock: string;
begin
  strBlock := 'Anything';
  ReturnValue := FRlxRazorProcessor.DoBlock(strBlock);
  CheckEquals (strBlock, ReturnValue);
end;

procedure TestTRlxRazorProcessor.TestDoubleAt;
var
  ReturnValue: string;
  strBlock: string;
begin
  strBlock := 'Anything @something';
  ReturnValue := FRlxRazorProcessor.DoBlock(DoubleAtSymbol (strBlock));
  CheckEquals (strBlock, ReturnValue);
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTRlxRazorEngine.Suite);
  RegisterTest(TestTRlxRazorProcessor.Suite);
end.

